plugins {
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
    id 'org.flywaydb.flyway' version '10.18.0'
    // Temporarily disabled for Java 25 compatibility
    // id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'org.owasp.dependencycheck' version '8.4.3'
}

group = 'com.production.microservices'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_25
    targetCompatibility = JavaVersion.VERSION_25
}

compileJava {
    options.release = 25
}

compileTestJava {
    options.release = 21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3")
    set('testcontainersVersion', "1.20.1")
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    
    // Micrometer for metrics
    implementation 'io.micrometer:micrometer-registry-prometheus'
    
    // Logging
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

// Flyway configuration for database migrations
flyway {
    url = project.findProperty('flyway.url') ?: 'jdbc:postgresql://localhost:5432/microservice_a_db'
    user = project.findProperty('flyway.user') ?: 'postgres'
    password = project.findProperty('flyway.password') ?: 'password'
    baselineOnMigrate = true
    validateOnMigrate = true
}

// Spring Boot build configuration
springBoot {
    buildInfo()
    mainClass = 'com.production.microservices.microservicea.MicroserviceAApplication'
}

// JVM arguments for development with Java 25 preview features
tasks.named('bootRun') {
    jvmArgs = [
        '--enable-preview',
        '-Xms512m',
        '-Xmx1024m',
        '-XX:+UseG1GC'
    ]
}

// JAR configuration
jar {
    enabled = false
    archiveClassifier = ''
}

// Fat JAR configuration
bootJar {
    archiveFileName = 'microservice-a.jar'
    mainClass = 'com.production.microservices.microservicea.MicroserviceAApplication'
    layered {
        enabled = true
    }
}

// Test configuration
test {
    useJUnitPlatform()
    testLogging {
        events = ["passed", "skipped", "failed"]
        exceptionFormat = "full"
    }
    // JVM arguments for tests with Java 25 preview features
    jvmArgs = [
        '--enable-preview',
        '-Dspring.classformat.ignore=true',
        '-Xms256m',
        '-Xmx512m'
    ]
}

// Code quality and analysis
tasks.register('checkHealth') {
    group = 'verification'
    description = 'Runs health checks for the application'
    dependsOn test
}

// Docker build helper task
tasks.register('dockerBuild') {
    group = 'docker'
    description = 'Builds Docker image for the application'
    dependsOn bootJar
    doLast {
        exec {
            commandLine 'docker', 'build', '-t', 'microservice-a:latest', '.'
        }
    }
}

// =================================================================
// CODE COVERAGE CONFIGURATION - TEMPORARILY DISABLED FOR JAVA 25
// =================================================================

// JaCoCo is temporarily disabled due to incompatibility with Java 25
// Will be re-enabled when JaCoCo releases Java 25 support

// =================================================================
// SONARQUBE CONFIGURATION
// =================================================================
sonarqube {
    properties {
        property "sonar.projectKey", "pranjaysingharch_Kubernetes-microservice-deployment"
        property "sonar.organization", "pranjaysingharch"
        property "sonar.host.url", "https://sonarcloud.io"
        // Temporarily disabled for Java 25 compatibility
        // property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

// =================================================================
// OWASP DEPENDENCY CHECK CONFIGURATION
// =================================================================
dependencyCheck {
    format = 'ALL'
    suppressionFile = 'owasp-suppressions.xml'
    failBuildOnCVSS = 7.0
    analyzers {
        experimentalEnabled = true
        archiveEnabled = true
        jarEnabled = true
        centralEnabled = true
        nexusEnabled = false
        pyDistributionEnabled = false
        pyPackageEnabled = false
        rubygemsEnabled = false
        opensslEnabled = false
        nuspecEnabled = false
        assemblyEnabled = false
        msbuildEnabled = false
        nugetconfEnabled = false
    }
}